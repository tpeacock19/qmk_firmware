# After making changes to code or tables call org-babel-tangle (C-c C-v t).

#+PROPERTY: header-args:python  :eval nil

* Miryoku QMK [[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/logos/miryoku-roa-32.png]]

[[https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/cover/miryoku-kle-cover.png]]

[[https://github.com/manna-harbour/miryoku/][Miryoku]] is an ergonomic, minimal, orthogonal, and universal keyboard layout.  This is the Miryoku implementation for [[https://qmk.fm][QMK]].

** Branches


*** QMK master

Miryoku QMK is periodically merged upstream into QMK master and it is generally recommended to build directly from QMK master.

QMK master is at https://github.com/qmk/qmk_firmware/tree/master, and the corresponding Miryoku QMK readme is at https://github.com/qmk/qmk_firmware/tree/master/users/manna-harbour_miryoku.


** Layout

***** Tap

****** Aliases
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 13:33]
:END:

#+NAME: aliases
| ASTRSK  | KC_KP_ASTERISK  |
| C_ESC   | CTL_T(KC_ESC)   |
| CA_CAPS | LCA_T(KC_CAPS)  |
| FNM     | MO(_FNM)        |
| NUM     | TG(_NUM)        |
| MDIA    | TG(_MDIA)       |
| UTIL    | TG(_UTIL)       |
| GUI_A   | LGUI_T(KC_A)    |
| ALT_R   | LALT_T(KC_R)    |
| CTL_S   | LCTL_T(KC_S)    |
| SHFT_T  | LSFT_T(KC_T)    |
| SFT_N   | RSFT_T(KC_N)    |
| CTL_E   | RCTL_T(KC_E)    |
| ALT_I   | LALT_T(KC_I)    |
| GUI_O   | RGUI_T(KC_O)    |
| MDIA_V  | LT(_MDIA, KC_V) |
| UTIL_K  | LT(_UTIL, KC_K) |
| UTIL_N  | LT(_UTIL, KC_N) |
| MLSFT   | OSM(MOD_LSFT)   |
| MRSFT   | OSM(MOD_RSFT)   |
| QUOT_TD | TD(QUOT_LAYR)   |
| SPC_TD  | TD(TD_SPC)      |
| TD_RES  | TD(TD_RESET)    |

#+NAME: aliases-def
#+BEGIN_SRC python :var layer_table=aliases :var mods_table=mods :tangle no :results silent 
mods_dict = dict.fromkeys(mods_table[0])
layers = []
keycodes = []
results = ""
for layer_row in layer_table:
    results += '#define ' + layer_row[0] + ' ' + layer_row[1]
    results += '\n'
results += '#define GRAVE_MODS  (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)|MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)|MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))\n'
return results
#+END_SRC

*** Layers
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 11:26]
:END:
#+NAME: layers
| _COLEMAK | _QWERTY | _FNM | _NUM | _MDIA | _UTIL |

#+NAME: layer-functions
| QWERTY | COLEMAK |

#+NAME: blank
| KC_NO |

#+NAME: trns
| _______ |

**** Colemak
***** Top Row
#+NAME: toprow
| GESC | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 | - | = | <- | ` |

***** Alphas
#+NAME: colemakdh
| Q | W | F | P | B | J | L | U | Y   | ; |
| A | R | S | T | G | M | N | E | I   | O |
| X | C | D | V | Z | K | H | , | DOT | / |

***** Left Modifiers 
#+NAME: mods-l
| TAB   |
| C_ESC |
| MLSFT |

***** Right Modifiers
#+NAME: mods-r
| [       | ]   | \   | DEL |
| QUOT_TD | ENT | xxx | xxx |
| MRSFT   | UP  | xxx | xxx |

***** Bottom Row
#+NAME: bottomrow
| CAPS | LGUI | LALT | SPC_TD | RALT | RCTL | FNM | LEFT | DOWN | RIGHT |

***** Hold
#+NAME: hold
|       |       |       |        |   |        |       |       |       |       |
| GUI_A | ALT_R | CTL_S | SHFT_T |   |        | SFT_N | CTL_E | ALT_I | GUI_O |
|       |       |       | MDIA_V |   | UTIL_K |       |       |       |       |

**** QWERTY
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 14:59]
:END:
***** Alphas
#+NAME: qwerty
| Q | W | E | R | T | Y | U | I | O   | P |
| A | S | D | F | G | H | J | K | L   | ; |
| Z | X | C | V | B | N | M | , | DOT | / |

***** Hold
#+NAME: q-hold
|   |   |   |        |   |        |   |   |   |   |
|   |   |   |        |   |        |   |   |   |   |
|   |   |   | MDIA_V |   | UTIL_N |   |   |   |   |

**** fnm Layer
***** Top Row
#+NAME: fnm-toprow
| ` | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10 | F11 | F12 |   |   |

***** Alphas
#+NAME: fnm
|   |      |        |         |   |   |   | PSCR | SLCK |   |
|   |      | QWERTY | COLEMAK |   |   |   | HOME | PGUP |   |
|   | COPY |        | PASTE   |   |   |   | END  | PGDN |   |

***** Left Modifiers 
#+NAME: fnm-mods-l
|   |
|   |
|   |

***** Right Modifiers
#+NAME: fnm-mods-r
|      |     | F20 |     |
|      |     | xxx | xxx |
| BTN1 | MUP | xxx | xxx |

***** Bottom Row
#+NAME: fnm-bottomrow
| DEBUG | RESET |   |   |   |   |   | MLEFT | MDOWN | MRIGHT |

***** Hold
:PROPERTIES:
:CREATED:  [2022-02-16 Wed 18:32]
:END:
#+NAME: fn-hold
|   |   |        |         |   |   |   |   |   |   |
|   |   | QWERTY | COLEMAK |   |   |   |   |   |   |
|   |   |        |         |   |   |   |   |   |   |

**** num layer
***** Top Row
#+NAME: num-toprow
| ` | F1 | F2 | F3 | F4 | F5 | F6 | F7 | F8 | F9 | F10 | F11 | F12 | DTP | DT+ |

***** Alphas
#+NAME: num
|   |   |   |   |   |   | 7 | 8 | 9 | - |
|   |   |   |   |   |   | 4 | 5 | 6 | + |
|   |   |   |   |   |   | 1 | 2 | 3 | / |

***** Left Modifiers 
#+NAME: num-mods-l
|     |
| NUM |
| DOT |

***** Right Modifiers
#+NAME: num-mods-r
|        |     |     | DT- |
| ASTRSK |     | xxx | xxx |
| DOT    | MUP | xxx | xxx |

***** Bottom Row
#+NAME: num-bottomrow
|DEBUG |RESET |   | 0 |   |   |   | MLEFT | MDOWN | MRIGHT |

***** Hold
#+NAME: num-hold
|   |   |        |         |   |   |   |   |   |   |
|   |   | QWERTY | COLEMAK |   |   |   |   |   |   |
|   |   |        |         |   |   |   |   |   |   |

**** media layer
***** Top Row
#+NAME: mdia-toprow
|   |   |   |   |   |   |   |   |   |   |   |   |   | ASRP | AS+ |

***** Alphas
#+NAME: mdia
   |   |   |   |   |   |   |      | MUTE |      |      |
   |   |   |   |   |   |   | MPRV | VOL- | VOL+ | MNXT |
   |   |   |   |   |   |   |      |      |      |      |

***** Left Modifiers 
#+NAME: mdia-mods-l
|      |
| MDIA |
|      |

***** Right Modifiers
#+NAME: mdia-mods-r
|   |     |     | AS- |
|   |     | xxx | xxx |
|   | MUP | xxx | xxx |

***** Bottom Row
#+NAME: mdia-bottomrow
|   |   |   | MPLY |   |   |   | MLEFT | MDOWN | MRIGHT |

***** Hold
#+NAME: mdia-hold
|   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |

****  util layer
***** Top Row
#+NAME: util-toprow
|   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |

***** Alphas
#+NAME: util
|   |      |      |       |   |   |   |   |   |   |
|   | BRID | BRIU |       |   |   |   |   |   |   |
|   | COPY |      | PASTE |   |   |   |   |   |   |

***** Left Modifiers 
#+NAME: util-mods-l
|      |
| UTIL |
|      |

***** Right Modifiers
#+NAME: util-mods-r
|   |   |     |     |
|   |   | xxx | xxx |
|   |   | xxx | xxx |

***** Bottom Row
#+NAME: util-bottomrow
|   |   |   |   |   |   |   |   |   |   |

***** Hold
#+NAME: util-hold
|   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |
|   |   |   |   |   |   |   |   |   |   |

**** Layer Functions
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 23:00]
:END:

** Code Generation

The layout is maintained in emacs org-mode tables and converted to QMK keymap
data structures using embedded python scripts.

*** Table Conversion Scripts

**** table-layout

Produce base layer from separate tap and hold tables.

#+NAME: table-layout
#+header: :var blank_val=blank :var alphas_table=colemakdh :var alias_table=aliases
#+header: :var mods_l_table=mods-l :var mods_r_table=mods-r :var bottom_table=bottomrow
#+header: :var top_table=toprow  :var hold_table=hold :var symbol_names_table=symbol-names
#+header: :var mods_table=mods :var td_table=tapdance :var osmods_table=osmods
#+header: :var nonkc_table=nonkc :var fun_table=layer-functions
#+BEGIN_SRC python  :eval t :tangle no :results silent
from itertools import zip_longest
from collections import OrderedDict


def list_to_dict(lst):
    res = {}
    for i in lst:
        res[i[0]] = i[1]
    return res


width = 9
mods_dict = mods_table[0]
osmods_dict = osmods_table[0]
td_dict = td_table[0]
top_dict = top_table[0]
bottom_dict = bottom_table[0]
fun_dict = fun_table[0]
alias_dict = list_to_dict(alias_table)
blank_val = blank_val[0]


def keycode(key, hold, location, skip):
    if key in symbol_names_dict:
        code = symbol_names_dict[key]
    elif key in osmods_dict:
        code = "OSM(MOD_" + str(key[1::]) + ")"
    elif key in td_dict:
        code = "TD(" + str(key) + ")"
    elif key == "xxx":
        return "";
    elif key:
        code = key
    else:
        code = blank_val[0]
    if not str(code).startswith(nonkc_tuple) and code not in alias_dict:
        code = "KC_" + str(code)
    if hold in osmods_dict:
        code = "OSM(MOD_" + str(hold[1::]) + ")"
    elif hold in mods_dict:
        code = str(hold) + "_T(" + code + ")"
    elif hold in alias_dict or hold in fun_dict:
        code = hold
    elif hold != "" and hold != "U_NP" and hold != "RESET":
        code = "LT(" + str(hold) + ", " + code + ")"
    if skip:
        code = (str(code + ", ")).ljust(width)
        code += "".ljust(width) * skip
    else:
        code = (str(code + ", ")).ljust(width)
    return code


nonkc_tuple = tuple(nonkc_table[0])
symbol_names_dict = {}
for symbol, name, shifted_symbol, shifted_name in symbol_names_table:
    symbol_names_dict[symbol] = name
    symbol_names_dict[shifted_symbol] = shifted_name

results = ""
n = 1
for top in top_dict:
    if n == 14:
        results += keycode(str(top), "", "mod", 1)
    else:
        results += keycode(str(top), "", "mod", "")
    n += 1
        

results = results.rstrip(" ") + "\n"

n = 1
row = 1
for lmod, tap_row, rmod, hold_row in zip_longest(
    mods_l_table, alphas_table, mods_r_table, hold_table, fillvalue=""
):
    n = 1
    for mod in lmod:
        results += keycode(str(mod), "", "mod","")
    for tap, hold in zip(tap_row, hold_row):
        results += keycode(str(tap), hold, "alpha", "")
    for mod in rmod:
        if row == 1 and n == 3:
            results += keycode(str(mod), "", "rmod",1)
        elif row == 2 and n == 1:
            results += keycode(str(mod), "", "rmod",1)
        elif row == 3 and n == 1:
            results += "".ljust(width) * 2
            results += keycode(str(mod), "", "rmod","")
        else:
            results += keycode(str(mod), "", "rmod","")
        n += 1
    results = results.rstrip(" ") + "\n"
    row += 1

n = 1
for bot in bottom_dict:
    if n == 3 or n == 4:
        results += keycode(str(bot), "", "bottom", 3)
    else:
        results += keycode(str(bot), "", "bottom", "")
    n += 1



results = results.rstrip("\n, ")
return results
#+END_SRC

**** table-enums

Produce layer enums from layer names in hold table.

#+NAME: table-enums
#+BEGIN_SRC python :var layer_table=layers :var mods_table=mods :tangle no :results silent
mods_dict = dict.fromkeys(mods_table[0])
layers = [ ]
keycodes = [ ]
for layer_row in layer_table:
  for hold in layer_row:
    if hold not in mods_dict and isinstance(hold, str) and hold != '' and hold != 'U_NP' and hold != 'RESET' and hold not in layers:
      layers.append(hold)
      if hold == "_COLEMAK":
          hold = "_COLEMAK = SAFE_RANGE"
      keycodes.append(hold[1:])
results = 'enum tpeacock19_layers { ' + ', '.join(layers) + ' };'
results = results.rstrip(' ') + '\n\n'
results += 'enum tpeacock19_keycodes { ' + ', '.join(keycodes) + ' };'
return results
#+END_SRC

**** COMMENT python-version

C-c C-c in code block to update

#+NAME: python-version
#+BEGIN_SRC python :tangle no
import sys
return sys.version
#+END_SRC

#+RESULTS: python-version
: 3.10.2 (main, Jan 15 2022, 19:56:27) [GCC 11.1.0]


*** Data

**** symbol-names

Symbol, name, and shifted symbol mappings for use in tables.

#+NAME: symbol-names
| `      | GRV   | ~     | TILD    |
| "-"    | MINS  | _     | UNDS    |
| =      | EQL   | +     | PLUS    |
| [      | LBRC  | {     | LCBR    |
| ]      | RBRC  | }     | RCBR    |
| \      | BSLS  | PIPE  | PIPE    |
| ;      | SCLN  | :     | COLN    |
| '      | QUOT  | DQUO  | DQUO    |
| ,      | COMM  | <     | LT      |
| "."    | DOT   | >     | GT      |
| /      | SLSH  | ?     | QUES    |
| 1      | 1     | !     | EXLM    |
| 2      | 2     | @     | AT      |
| 3      | 3     | #     | HASH    |
| 4      | 4     | $     | DLR     |
| 5      | 5     | %     | PERC    |
| 6      | 6     | ^     | CIRC    |
| 7      | 7     | &     | AMPR    |
| 8      | 8     | *     | ASTR    |
| 9      | 9     | (     | LPRN    |
| 0      | 0     | )     | RPRN    |
| <-     | BSPC  | MLEFT | MS_L    |
| MRIGHT | MS_R  | MUP   | MS_U    |
| MDOWN  | MS_D  | DT-   | DT_DOWN |
| DT+    | DT_UP | DTP   | DT_PRNT |
| VOL+   | VOLU  | VOL-  | VOLD    |
| AS+    | ASUP  | AS-   | ASDN    |

**** mods

Modifiers usable in hold table.  Need to have the same name for ~KC_~ and ~_T~
versions.

#+NAME: mods
| LSFT | LCTL | LALT | LGUI | RSFT | RCTL | RGUI | LCAC |

#+NAME: osmods
| OL^ | MLCTL | MLALT | MLGUI | OR^ | MRCTL | MRGUI | LCAC |


**** nonkc

Keycodes that match any of these prefixes will not have ~KC_~ automatically
prepended.

#+NAME: nonkc
| U_ | RGB_ | DEBUG | RESET | S( | C( | SCMD( | LCMD( | OSM( | TD( | QWERTY | COLEMAK | KC_NO | KC_TRNS | _______ | DT_ |


**** Tap Dance
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 12:58]
:END:

#+NAME: tapdance
| QUOT_LAYR | TD_RESET | TD_SPC |

#+NAME: td-enums
#+BEGIN_SRC python :var layer_table=tapdance :var mods_table=mods :tangle no :results silent
mods_dict = dict.fromkeys(mods_table[0])
layers = [ ]
keycodes = [ ]
for layer_row in layer_table:
  for hold in layer_row:
    if hold not in mods_dict and isinstance(hold, str) and hold != '' and hold != 'U_NP' and hold != 'RESET' and hold not in layers:
      layers.append(hold)
results = 'enum { ' + ', '.join(layers) + ' }'
return results
#+END_SRC

#+NAME: td-setup
#+begin_src c :main no :noweb yes :padline no :tangle no
// Define a type for as many tap dance states as you need
typedef enum { TD_NONE, TD_UNKNOWN, TD_SINGLE_TAP, TD_SINGLE_HOLD, TD_DOUBLE_TAP } td_state_t;

typedef struct {
    bool       is_press_action;
    td_state_t state;
} td_tap_t;

<<td-enums()>>;

// Function associated with all tap dances
td_state_t cur_dance(qk_tap_dance_state_t *state);

// Functions associated with individual tap dances
void ql_finished(qk_tap_dance_state_t *state, void *user_data);
void ql_reset(qk_tap_dance_state_t *state, void *user_data);
#+end_src

#+NAME: td-funs
#+begin_src c :main no :noweb yes :padline no :tangle no
// Determine the current tap dance state
td_state_t cur_dance(qk_tap_dance_state_t *state) {
    if (state->count == 1) {
        if (!state->pressed)
            return TD_SINGLE_TAP;
        else
            return TD_SINGLE_HOLD;
    } else if (state->count == 2)
        return TD_DOUBLE_TAP;
    else
        return TD_UNKNOWN;
}

// Initialize tap structure associated with example tap dance key
static td_tap_t ql_tap_state = {.is_press_action = true, .state = TD_NONE};

void ql_finished(qk_tap_dance_state_t *state, void *user_data) {
    ql_tap_state.state = cur_dance(state);
    switch (ql_tap_state.state) {
        case TD_SINGLE_TAP:
            tap_code(KC_QUOT);
            break;
        case TD_SINGLE_HOLD:
            layer_on(_FNM);
            break;
        case TD_DOUBLE_TAP:
            // Check to see if the layer is already set
            if (layer_state_is(_NUM)) {
                // If already set, then switch it off
                layer_off(_NUM);
            } else {
                // If not already set, then switch the layer on
                layer_on(_NUM);
            }
            break;
        default:
            break;
    }
};

void ql_reset(qk_tap_dance_state_t *state, void *user_data) {
    // If the key was held down and now is released then switch off the layer
    if (ql_tap_state.state == TD_SINGLE_HOLD) {
        layer_off(_FNM);
    }
    ql_tap_state.state = TD_NONE;
};

// Associate our tap dance key with its functionality
qk_tap_dance_action_t tap_dance_actions[] = {[QUOT_LAYR] = ACTION_TAP_DANCE_FN_ADVANCED(NULL, ql_finished, ql_reset), [TD_SPC] = ACTION_TAP_DANCE_DOUBLE(KC_SPC, KC_ENT)};
#+end_src

**** Layers
:PROPERTIES:
:CREATED:  [2022-02-16 Wed 19:20]
:END:

#+NAME: layer-setup
#+begin_src c :main no :noweb yes :padline no :tangle no
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  [_COLEMAK] = LAYOUT(
                      <<table-layout()>>
                      ),
  
  [_QWERTY] = LAYOUT(
                      <<table-layout(alphas_table=qwerty, mods_l_table=mods-l, mods_r_table=mods-r, bottom_table=bottomrow, top_table=toprow , hold_table=q-hold, blank_val=trns)>>
                      ),

  [_FNM] = LAYOUT(
                      <<table-layout(alphas_table=fnm, mods_l_table=fnm-mods-l, mods_r_table=fnm-mods-r, bottom_table=fnm-bottomrow, top_table=fnm-toprow , hold_table=fn-hold, blank_val=trns)>>
                      ),

  [_NUM] = LAYOUT(
                      <<table-layout(alphas_table=num, mods_l_table=num-mods-l, mods_r_table=num-mods-r, bottom_table=num-bottomrow, top_table=num-toprow , hold_table=num-hold, blank_val=trns)>>
                      ),
  [_MDIA] = LAYOUT(
                      <<table-layout(alphas_table=mdia, mods_l_table=mdia-mods-l, mods_r_table=mdia-mods-r, bottom_table=mdia-bottomrow, top_table=mdia-toprow , hold_table=mdia-hold, blank_val=trns)>>
                      ),
  [_UTIL] = LAYOUT(
                      <<table-layout(alphas_table=util, mods_l_table=util-mods-l, mods_r_table=util-mods-r, bottom_table=util-bottomrow, top_table=util-toprow , hold_table=util-hold, blank_val=trns)>>
                      )
};
#+end_src

**** Per Key Settings
:PROPERTIES:
:CREATED:  [2022-02-16 Wed 21:35]
:END:

#+NAME: tap-term-per-key
#+begin_src c :main no :noweb yes :padline no :tangle no
uint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case LT(5, KC_K):
            return TAPPING_TERM + 150;
        case LT(4, KC_V):
            return TAPPING_TERM + 150;
        case TD(QUOT_LAYR):
            return TAPPING_TERM + 150;
        case GUI_T(KC_SPC):
            return TAPPING_TERM + 1250;
        default:
            return TAPPING_TERM;
    }
};
#+end_src


#+NAME: tap-force-per-key
#+begin_src c :main no :noweb yes :padline no :tangle no
bool get_tapping_force_hold(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case LT(1, KC_BSPC):
            return true;
        default:
            if (record->event.key.row == 4) {
                return true;
            }
            return false;
    }
};
#+end_src

**** User Processes
:PROPERTIES:
:CREATED:  [2022-02-16 Wed 21:38]
:END:

#+NAME: user-processes
#+begin_src c :main no :noweb yes :padline no :tangle no
bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case QWERTY:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_QWERTY);
            }
            return false;
        case COLEMAK:
            if (record->event.pressed) {
                set_single_persistent_default_layer(_COLEMAK);
            }
            return false;
        case LT(0, KC_NO):
            if (record->tap.count && record->event.pressed) {
                tap_code16(C(KC_C));  // Intercept tap function to send Ctrl-C
            } else if (record->event.pressed) {
                tap_code16(C(KC_V));  // Intercept hold function to send Ctrl-V
            }
            return false;
            /* case RCTL_T(KC_E): */
            /*     /\* */
            /*       This piece of code nullifies the effect of Right Shift when tapping */
            /*       the RCTL_T(KC_E) key. */
            /*       This helps rolling over RSFT_T(KC_N) and RCTL_T(KC_E) */
            /*       to obtain the intended "en" instead of "N". */
            /*       Consequently, capital N can only be obtained by tapping RCTL_T(KC_E) */
            /*       and holding LSFT_T(KC_T) (which is the left Shift mod tap). */
            /*     *\/ */

            /*     /\* */
            /*       Detect the tap. */
            /*       We're only interested in overriding the tap behaviour */
            /*       in a certain cicumstance. The hold behaviour can stay the same. */
            /*     *\/ */
            /*     if (record->event.pressed && record->tap.count > 0) { */
            /*         // Detect right Shift */
            /*         if (get_mods() & MOD_BIT(KC_RSHIFT)) { */
            /*             // temporarily disable right Shift */
            /*             // so that we can send KC_N and KC_E */
            /*             // without Shift on. */
            /*             unregister_mods(MOD_BIT(KC_RSHIFT)); */
            /*             tap_code(KC_N); */
            /*             tap_code(KC_E); */
            /*             // restore the mod state */
            /*             add_mods(MOD_BIT(KC_RSHIFT)); */
            /*             // to prevent QMK from processing RCTL_T(KC_E) as usual in our special case */
            /*             return false; */
            /*         } */
            /*     } */
            /*     /\*else process RCTL_T(KC_E) as usual.*\/ */
            /*     return true; */
            /* case LCTL_T(KC_S): */
            /*     /\* */
            /*       This piece of code nullifies the effect of Left Shift when */
            /*       tapping the LCTL_T(KC_S) key. */
            /*       This helps rolling over LSFT_T(KC_T) and LCTL_T(KC_S) */
            /*       to obtain the intended "st" instead of "T". */
            /*       Consequently, capital T can only be obtained by tapping LCTL_T(KC_S) */
            /*       and holding RSFT_T(KC_N) (which is the right Shift mod tap). */
            /*     *\/ */

            /*     if (record->event.pressed && record->tap.count > 0) { */
            /*         if (get_mods() & MOD_BIT(KC_LSHIFT)) { */
            /*             unregister_mods(MOD_BIT(KC_LSHIFT)); */
            /*             tap_code(KC_T); */
            /*             tap_code(KC_S); */
            /*             add_mods(MOD_BIT(KC_LSHIFT)); */
            /*             return false; */
            /*         } */
            /*     } */
            /*     /\*else process LCTL_T(KC_S) as usual.*\/ */
            /*     return true; */
    }
    return true;
};
#+end_src

***** 
:PROPERTIES:
:CREATED:  [2022-02-17 Thu 11:09]
:END:
**** header

Header for tangled files.
[[info:org#Results of Evaluation][org#Results of Evaluation]]
#+NAME: header
#+BEGIN_SRC C :main no :tangle no
-*- buffer-read-only: t -*-
Copyright 2022 Trey Peacock
#+END_SRC


**** license-qmk

License for tangled QMK C source files.

#+NAME: license-qmk
#+BEGIN_SRC C :main no :tangle no
/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#+END_SRC


*** [[file:rules.mk][keyboards/fc660c/keymaps/tpeacock19/rules.mk]]

Build options.  Automatically included.

#+BEGIN_SRC makefile :noweb yes :padline no :tangle rules.mk
# <<header>>

BOOTMAGIC_ENABLE = yes  # Enable Bootmagic Lite
CONSOLE_ENABLE = no     # Disable Console for debug
NKRO_ENABLE = no        # Disable N-Key Rollover

# Optimize size but this may cause error "relocation truncated to fit"
EXTRALDFLAGS = -Wl,--relax

AUTO_SHIFT_ENABLE = yes
TAP_DANCE_ENABLE = yes
DYNAMIC_TAPPING_TERM_ENABLE = yes

# Combos
COMBO_ENABLE = yes
VPATH += keyboards/gboards

# Space saving
LTO_ENABLE = yes
MUSIC_ENABLE = no
#+END_SRC


*** [[file:config.h][keyboards/fc660c/keymaps/tpeacock19/config.h]]

Config options.  Automatically included.

#+BEGIN_SRC C :main no :noweb yes :padline no :tangle config.h
// <<header>>

<<license-qmk>>

#pragma once

// default but used in macros
#undef TAPPING_TERM
#define TAPPING_TERM 230
#define TAPPING_TERM_PER_KEY

// Prevent normal rollover on alphas from accidentally triggering mods.
#define IGNORE_MOD_TAP_INTERRUPT

// Enable rapid switch from tap to hold, disables double tap hold auto-repeat.
#define TAPPING_FORCE_HOLD_PER_KEY

// Auto Shift
#define NO_AUTO_SHIFT_ALPHA
#define AUTO_SHIFT_TIMEOUT TAPPING_TERM
#define AUTO_SHIFT_NO_SETUP

// Make actuation point more sensitive
#define ACTUATION_DEPTH_ADJUSTMENT -1

// Tapping this number of times holds the key until tapped once again.
#define ONESHOT_TAP_TOGGLE 2 
// Time (in ms) before the one shot code is released
#define ONESHOT_TIMEOUT 5000 

#define NO_MUSIC_MODE
#+END_SRC

*** [[file:keymap-new.c][keyboards/fc660c/keymaps/tpeacock19/keymap-new.c]] 
:PROPERTIES:
:CREATED:  [2022-02-15 Tue 11:57]
:END:
#+BEGIN_SRC C :main no :noweb yes :padline no :tangle keymap.c
// <<header>>

<<license-qmk>>

#include QMK_KEYBOARD_H
#include "g/keymap_combo.h"

<<table-enums()>>

<<td-setup>>

<<aliases-def()>>

<<layer-setup>>

<<td-funs>>

<<tap-term-per-key>>

<<tap-force-per-key>>

<<user-processes>>
#+END_SRC

** Subset Mapping

The keymap, build options, and configuration are shared between keyboards.  The
layout is mapped onto keyboards with different physical layouts as a subset
without code duplication using the QMK userspace feature and C macros.


*** Customisation

To add customisations to a keyboard or layout while importing the miryoku
keymap, copy ~config.h~ and ~keymap.c~ from the keyboard or layout's
~manna-harbour_miryoku/~ directory to a new directory, and create ~rules.mk~
containing ~USER_NAME := manna-harbour_miryoku~.  The miryoku keymap will be
imported and customisations can be added to those files as usual.  Keycodes can
be added to unused keys by editing ~LAYOUT_miryoku~ in ~config.h~.

For an unsupported keyboard or layout, do as above with a similar keyboard or
layout and modify ~LAYOUT_miryoku~ in ~config.h~ referring to the keyboard or
layout's ~LAYOUT~ macro.


**** Examples

To use any of the examples, create a new branch from the miryoku development
branch and follow the same steps as seen in the commit messages and code changes
in the examples, making the appropriate changes for your keyboard and desired
customisations.


***** Add Layers

- https://github.com/manna-harbour/qmk_firmware/commits/miryoku-examples-add-layers/keyboards/crkbd/keymaps/miryoku-examples-add-layers


** Documentation


*** QMK

- https://docs.qmk.fm/
- https://docs.qmk.fm/#/config_options
- https://docs.qmk.fm/#/feature_advanced_keycodes
- https://docs.qmk.fm/#/feature_auto_shift
- https://docs.qmk.fm/#/feature_layers
- https://docs.qmk.fm/#/feature_layouts
- https://docs.qmk.fm/#/feature_mouse_keys
- https://docs.qmk.fm/#/feature_userspace
- https://docs.qmk.fm/#/getting_started_introduction
- https://docs.qmk.fm/#/getting_started_make_guide
- https://docs.qmk.fm/#/keycodes
- https://docs.qmk.fm/#/mod_tap
- https://docs.qmk.fm/#/tap_hold


*** Org Mode

- https://orgmode.org/
- https://orgmode.org/manual/Tables.html
- https://orgmode.org/manual/Working-with-Source-Code.html


** 

[[https://github.com/manna-harbour][https://raw.githubusercontent.com/manna-harbour/miryoku/master/data/logos/manna-harbour-boa-32.png]]
